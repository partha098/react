{"version":3,"sources":["Header.js","Home.js","About.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","this","name","React","Component","Home","withRouter","About","Contact","App","className","href","to","type","data-toggle","data-target","id","data-dismiss","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PA2BeA,G,wDArBd,WAAYC,GAAO,uCACVA,G,qDAQN,OACE,6BAEA,4CAAkBC,KAAKD,MAAME,W,GAddC,IAAMC,Y,OCErBC,E,kDAEJ,WAAYL,GAAO,uCACXA,G,qDASN,OACE,6BACA,8C,GAdaG,IAAMC,WAqBVE,cAAWD,GCEXE,E,kDArBb,WAAYP,GAAO,uCACXA,G,qDAUN,OACE,6BACN,+C,GAfoBG,IAAMC,WCmBXI,E,kDAjBb,WAAYR,GAAO,uCACXA,G,qDAON,OACE,6BACD,yD,GAZiBG,IAAMC,W,QCyGbK,E,kDAzFb,WAAYT,GAAO,uCACXA,G,qDAMN,OACE,kBAAC,IAAD,KACA,yBAAKU,UAAU,aAEf,yBAAKA,UAAU,+CAEnB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,QAGA,wBAAID,UAAU,cACZ,wBAAIA,UAAU,YAEZ,kBAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,KAA9B,SAEF,wBAAIF,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,UAA9B,UAEF,wBAAIF,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,YAA9B,YAEL,wBAAIF,UAAU,YACT,4BAAQG,KAAK,SAASH,UAAU,kBAAkBI,cAAY,QAAQC,cAAY,YAAlF,YAQN,yBAAKL,UAAU,QAAQM,GAAG,WACxB,yBAAKN,UAAU,gBACb,yBAAKA,UAAU,iBAGb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAd,iBACA,4BAAQG,KAAK,SAASH,UAAU,QAAQO,eAAa,SAArD,SAIF,yBAAKP,UAAU,cAAf,gBAKA,yBAAKA,UAAU,gBACb,4BAAQG,KAAK,SAASH,UAAU,iBAAiBO,eAAa,SAA9D,aASR,kBAAC,IAAD,KACS,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAQjB,KAAK,QACb,kBAAC,EAAD,OAKF,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWb,IAGrC,kBAAC,IAAD,CAAOW,OAAK,EAAEC,KAAK,YAEjB,kBAAC,EAAD,c,GA7EMhB,IAAMC,WCRJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e0152157.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass Header extends React.Component {\r\n\r\n\tconstructor(props){\r\n    super(props);\r\n    \r\n   \r\n\r\n    }\r\n\r\n  render() {\r\n\r\n    return(\r\n      <div>\r\n\r\n      <h1>I am Header  {this.props.name}</h1>\r\n\r\n      \r\n       </div>\r\n      )\r\n   \r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './App.css';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n \r\n\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n    return(\r\n      <div>\r\n      <h1>Home Page</h1>\r\n </div>\r\n      )\r\n   \r\n  }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass About extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    \r\n    \r\n\r\n  }\r\n\r\n \r\n  \r\n  render() {\r\n\r\n    return(\r\n      <div>\r\n<h1>About Page</h1>\r\n\r\n       </div>\r\n      )\r\n   \r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass Contact extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n    return(\r\n      <div>\r\n     <h1>This is Contact Page</h1>\r\n       </div>\r\n      )\r\n   \r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\nimport {Component} from 'react';\nimport './App.css';\n\nimport Header from './Header';\n\nimport Home from './Home';\n\nimport About from './About';\n\nimport Contact from './Contact';\n\nimport {\n  BrowserRouter ,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n \n    }\n\n  render() {\n\n    return(\n      <BrowserRouter>\n      <div className=\"container\">\n\n      <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n  \n  <a className=\"navbar-brand\" href=\"#\">Logo</a>\n  \n  \n  <ul className=\"navbar-nav\">\n    <li className=\"nav-item\">\n\n      <Link className=\"nav-link\" to=\"/\">Home</Link>\n    </li>\n    <li className=\"nav-item\">\n      <Link className=\"nav-link\" to=\"/about\">About</Link>\n    </li>\n    <li className=\"nav-item\">\n      <Link className=\"nav-link\" to=\"/contact\">Contact</Link>\n    </li>\n <li className=\"nav-item\">\n      <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#myModal\">\n Login\n</button>\n    </li>\n\n  </ul>\n</nav>\n\n<div className=\"modal\" id=\"myModal\">\n  <div className=\"modal-dialog\">\n    <div className=\"modal-content\">\n\n    \n      <div className=\"modal-header\">\n        <h4 className=\"modal-title\">Modal Heading</h4>\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\n      </div>\n\n   \n      <div className=\"modal-body\">\n        Modal body..\n      </div>\n\n \n      <div className=\"modal-footer\">\n        <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n\n\n<Switch>\n         <Route exact path=\"/\" >\n           <Header name=\"Eit\"/>\n           <Home/>\n\n         </Route>\n            \n\n         <Route exact path=\"/about\" component={About} />\n\n\n          <Route exact  path=\"/contact\">\n          \n            <Contact />\n          </Route>\n           \n        </Switch>\n\n           \n\n      </div>\n      </BrowserRouter>\n      )\n   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}